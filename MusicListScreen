package com.example.musicapp.screen

import android.graphics.BitmapFactory
import android.media.MediaPlayer
import android.os.Handler
import android.os.Looper
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.example.musicapp.data.Song
import com.example.musicapp.data.getSongsFromRaw


@Composable
fun MusicListScreen(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val songList = remember { getSongsFromRaw(context) }
    var mediaPlayer by remember { mutableStateOf<MediaPlayer?>(null) }
    var currentPlayingSong by remember { mutableStateOf<Song?>(null) }
    var isPlaying by remember { mutableStateOf(false) }
    var songDuration by remember { mutableIntStateOf(0) }
    val seekHandler = remember { Handler(Looper.getMainLooper()) }
    var currentPositionMap = remember { mutableStateMapOf<String, Int>() }

    val updateSeekBar = remember {
        object : Runnable {
            override fun run() {
                mediaPlayer?.let {
                    if (it.isPlaying) {
                        currentPlayingSong?.let { song ->
                            currentPositionMap[song.id] = it.currentPosition
                        }
                        seekHandler.postDelayed(this, 1000)
                    }
                }
            }
        }
    }

    Column(modifier.fillMaxSize()) {
        songList.forEach { song ->
            var currentPosition by remember { mutableIntStateOf(0) }

            SongItem(song) {
                mediaPlayer?.release()
                mediaPlayer = MediaPlayer.create(context, song.uri).apply {
                    setOnPreparedListener {
                        start()
                        songDuration = duration
                        currentPosition = 0
                        currentPositionMap[song.id] = 0
                        seekHandler.post(updateSeekBar)
                        isPlaying = true
                        currentPlayingSong = song
                    }
                }
            }

            if (currentPlayingSong == song) {
                BottomMusicPlayer(
                    song = song,
                    isPlaying = isPlaying,
                    currentPosition = currentPositionMap[song.id] ?: 0,
                    duration = songDuration,
                    onPlayPauseClick = {
                        mediaPlayer?.let {
                            if (it.isPlaying) {
                                it.pause()
                                isPlaying = false
                            } else {
                                it.start()
                                isPlaying = true
                                seekHandler.post(updateSeekBar)
                            }
                        }
                    },
                    onNextClick = {
                        val currentIndex = songList.indexOf(song)
                        val nextIndex = (currentIndex + 1) % songList.size
                        val nextSong = songList[nextIndex]

                        mediaPlayer?.release()
                        mediaPlayer = MediaPlayer.create(context, nextSong.uri).apply {
                            setOnPreparedListener {
                                start()
                                songDuration = duration
                                currentPositionMap[nextSong.id] = 0
                                seekHandler.post(updateSeekBar)
                                isPlaying = true
                                currentPlayingSong = nextSong
                            }
                        }
                    },
                    onSeekChange = { newPosition ->
                        mediaPlayer?.seekTo(newPosition)
                        currentPositionMap[song.id] = newPosition
                    }
                )
            }
        }
    }
}



@Composable
fun BottomMusicPlayer(
    song: Song,
    isPlaying : Boolean,
    currentPosition: Int,
    duration: Int,
    onPlayPauseClick: () -> Unit,
    onNextClick: () -> Unit,
    onSeekChange: (Int) -> Unit
) {
    Card(modifier = Modifier.fillMaxWidth().padding(12.dp), shape = RoundedCornerShape(16.dp)) {
        Text(text = song.title, style = MaterialTheme.typography.titleMedium)
        Slider(
            value = currentPosition.toFloat(),
            onValueChange = {onSeekChange(it.toInt())},
            valueRange = 0f..duration.toFloat(),
            colors = SliderDefaults.colors(
                activeTrackColor = MaterialTheme.colorScheme.primary, inactiveTrackColor = MaterialTheme.colorScheme.onSecondary
            )
        )

        Row (modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
            Button (onClick = onPlayPauseClick) {
                Text(if (isPlaying) "Pause" else "Play")
            }
            Button(onClick = onNextClick) {
                Text("Next")
            }
        }
    }
}



@Composable
fun SongItem(song: Song,onSongClick:()->Unit) {
    Card(modifier = Modifier
        .fillMaxWidth()
        .clickable { onSongClick() }
        .padding(8.dp), shape = RoundedCornerShape(12.dp)
    ) {
        Row() {
            song.image?.let {
                val bitmap = BitmapFactory.decodeByteArray(it, 0, it.size)
                Image(
                    bitmap = bitmap.asImageBitmap(),
                    contentDescription = "Album Art",
                    modifier = Modifier.size(60.dp)
                )
                Spacer(modifier = Modifier.width(16.dp))
                Text(song.title, style = MaterialTheme.typography.titleLarge)
            }
        }
    }
}
